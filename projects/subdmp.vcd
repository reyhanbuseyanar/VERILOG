$date
	Thu Dec 19 14:18:29 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module subtractiontb $end
$var wire 4 ! Y [3:0] $end
$var wire 1 " CarryOUT $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 1 % CarryIN $end
$scope module uut $end
$var wire 4 & A [3:0] $end
$var wire 4 ' B [3:0] $end
$var wire 1 % CarryIN $end
$var wire 4 ( Y [3:0] $end
$var wire 4 ) notB [3:0] $end
$var wire 4 * Y1 [3:0] $end
$var wire 1 " CarryOUT $end
$scope module a1 $end
$var wire 4 + A [3:0] $end
$var wire 4 , B [3:0] $end
$var wire 1 % CarryIN $end
$var wire 4 - Y [3:0] $end
$var wire 1 " CarryOUT $end
$var wire 4 . Carry4 [3:0] $end
$scope module f0 $end
$var wire 1 / A $end
$var wire 1 0 B $end
$var wire 1 % Cin $end
$var wire 1 1 Cout $end
$var wire 1 2 S $end
$var wire 1 3 AxB $end
$var wire 1 4 AnB2 $end
$var wire 1 5 AnB1 $end
$scope module h1 $end
$var wire 1 / A $end
$var wire 1 0 B $end
$var wire 1 3 carry_out $end
$var wire 1 5 sum $end
$upscope $end
$scope module h2 $end
$var wire 1 3 A $end
$var wire 1 % B $end
$var wire 1 2 carry_out $end
$var wire 1 4 sum $end
$upscope $end
$upscope $end
$scope module f1 $end
$var wire 1 6 A $end
$var wire 1 7 B $end
$var wire 1 8 Cin $end
$var wire 1 9 Cout $end
$var wire 1 : S $end
$var wire 1 ; AxB $end
$var wire 1 < AnB2 $end
$var wire 1 = AnB1 $end
$scope module h1 $end
$var wire 1 6 A $end
$var wire 1 7 B $end
$var wire 1 ; carry_out $end
$var wire 1 = sum $end
$upscope $end
$scope module h2 $end
$var wire 1 ; A $end
$var wire 1 8 B $end
$var wire 1 : carry_out $end
$var wire 1 < sum $end
$upscope $end
$upscope $end
$scope module f2 $end
$var wire 1 > A $end
$var wire 1 ? B $end
$var wire 1 @ Cin $end
$var wire 1 A Cout $end
$var wire 1 B S $end
$var wire 1 C AxB $end
$var wire 1 D AnB2 $end
$var wire 1 E AnB1 $end
$scope module h1 $end
$var wire 1 > A $end
$var wire 1 ? B $end
$var wire 1 C carry_out $end
$var wire 1 E sum $end
$upscope $end
$scope module h2 $end
$var wire 1 C A $end
$var wire 1 @ B $end
$var wire 1 B carry_out $end
$var wire 1 D sum $end
$upscope $end
$upscope $end
$scope module f3 $end
$var wire 1 F A $end
$var wire 1 G B $end
$var wire 1 H Cin $end
$var wire 1 " Cout $end
$var wire 1 I S $end
$var wire 1 J AxB $end
$var wire 1 K AnB2 $end
$var wire 1 L AnB1 $end
$scope module h1 $end
$var wire 1 F A $end
$var wire 1 G B $end
$var wire 1 J carry_out $end
$var wire 1 L sum $end
$upscope $end
$scope module h2 $end
$var wire 1 J A $end
$var wire 1 H B $end
$var wire 1 I carry_out $end
$var wire 1 K sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
1L
1K
0J
0I
1H
1G
0F
1E
1D
0C
0B
1A
1@
1?
0>
1=
1<
0;
0:
19
18
17
06
15
04
03
02
11
00
1/
bz111 .
b0 -
b1110 ,
b1 +
b0 *
b1110 )
b0 (
b10 '
b1 &
0%
b10 $
b1 #
1"
b0 !
$end
#10
0@
09
0<
08
1K
01
12
1H
05
13
0=
bz100 .
1A
1D
b1 !
b1 (
b1 *
b1 -
0B
10
07
0E
1C
04
b1101 )
b1101 ,
1>
1%
b11 $
b11 '
b101 #
b101 &
b101 +
#20
1@
19
1H
1<
1A
18
1D
0"
0K
1I
bz111 .
11
0?
15
03
0E
0C
0L
1J
04
b1000 !
b1000 (
b1000 *
b1000 -
02
b1001 )
b1001 ,
0/
0>
1F
0%
b111 $
b111 '
b1000 #
b1000 &
b1000 +
#30
1"
1K
0I
1@
0H
08
19
1<
0:
0A
0D
1B
bz010 .
01
1;
1C
b101 !
b101 (
b101 *
b101 -
12
17
1?
05
13
0=
0E
04
b1111 )
b1111 ,
1/
16
1>
1%
b1 $
b1 '
b1111 #
b1111 &
b1111 +
#40
0@
09
1H
08
1L
0J
0<
1A
0D
0B
bz100 .
01
00
07
0G
05
03
0=
0;
1E
0C
04
b0 !
b0 (
b0 *
b0 -
02
b100 )
b100 ,
0/
06
0>
0%
b1100 $
b1100 '
b1000 #
b1000 &
b1000 +
#50
